######################################################################################
# pwatchd-0.4 beta configuration file
# pwatchd is a daemon similar to 'portsentry' written specifically for OpenBSD
# it manipulates the 'pf' pseudo-device using the ioctl calls found in 'man pf' 
#######################################################################################

# option: INTERFACE 
# the interface you want pwatch to monitor e.g fxp0
# it will complain and bail when a connection attempt (e.g from a LAN Node) is made on the interface specified *if* the interface 
# is not currently active.
# This methodology has been chosen to allow an interface to be taken down or have its ip changed without 
# having to worry about re-starting pwatch. 
# Useful on a dial-up interface assigned via DHCP, as the IP may change if the link is dropped.
INTERFACE="tun0"

# option: REUSE_SOCKETS 
# this will allow sockets to be re-used if they are already in use by pwatch
# useful for re-starting pwatch
# NOTE: this *only* applies to sockets bound by pwatch
# pwatch will *not* bind over sockets already in use by other daemons/programs
REUSE_SOCKETS="0"

# option: TCP_PORT_LIST 
# set this to 0 if you don't want tcp binding
# you can put any port you want here; bearing in mind that only root can bind < 1024.
# There is a max value: [ SOCK_LIMIT 250 ] located in 'parseconf.h'
# also, _only_ root should have access to the 'pf' device 
TCP_PORT_LIST="1,2,3,4,5,7,11,13,15,19,20,21,22,23,25,37,53,67,68,69,79,80,87,109,110,111,119,123,137,138,139,143,144,161,162,177,445,512,513,514,515,517,518,520,540,635,1080,1114,3127,1433,2000,2049,5554,5631,5632,6667,9898,12345,12346,20034,31337,31790,31789"

# ***( NOT YET IMPLEMENTED )*****
# option: UDP_PORT_LIST 
# set this to 0 if you don't want udp binding
UDP_PORT_LIST="0"

# ***( NOT YET IMPLEMENTED )*****
# option: PKT_SCAN
# tell pwatch to open raw sockets and scan tcp/udp packets
# for dodgy values.
# set this to 0 for stream sockets and *no* packet scanning
PKT_SCAN="1"

# option: PARSE_ENTIRE_RULSET
# setting this to '1' forces pwatch to parse the *entire* active ruleset 
# to check for duplicates *each* time a connection is made. 
# The upside of this, is; pwatch will recognise duplicates from its previous process'.
# The downside being the extra overhead of parsing a possibly 'huge' ruleset.
#
# if set to '0' then pwatch keeps track *only* within its current process memory of how many connections have been made 
# and will only parse the number of rules it has added through its current process.  
# The downside of setting this to 0 is; if pwatch is re-started in a new process it loses track and 
# will not recognise duplicates from its previous process and therefore *will* add duplicate rules!
# *NOTE* pwatch adds its first rule straight after rule nr 0 in the active ruleset and therefore before any 
# rules pwatch previously created in another process.
# IMPORTANT: this option is ignored if USE_ANCHOR == 1
PARSE_ENTIRE_RULESET="1"

# ***( NOT YET IMPLEMENTED )*****
# option: USE_ANCHOR
# IMPORTANT: this option will be ignored if PARSE_ENTIRE_RULESET == 1
# use this to make pwatch add all of its rules to the named anchor
# this can tidy a ruleset if pwatch is being heavily used 
USE_ANCHOR="0"

# ***( NOT YET IMPLEMENTED )*****
# option: ANCHOR_NAME
# the name of the anchor you would like to use
# this will be *silently* ignored if USE_ANCHOR == 0
ANCHOR_NAME="pwatch"

#########################################################
## Not sure if the following are even worth implementing
#########################################################
# ***( NOT YET IMPLEMENTED )*****
# option: FLUSH_AND_RELOAD
# on exit pwatch will flush and reload the active ruleset 
FLUSH_AND_RELOAD="0"

# ***( NOT YET IMPLEMENTED )*****
# option: PF_RULESET
# specifies the rulset to be reloaded on exit
# ignored if FLUSH_AND_RELOAD == 0
PF_RULESET="/etc/pf.conf"
